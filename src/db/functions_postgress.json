[
    {"schema_name":"public",
    "function_name":"decrement_active_numbers",
    "definition":"CREATE OR REPLACE FUNCTION public.decrement_active_numbers()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n  UPDATE \"metaData\"\n  SET active_numbers = active_numbers - 1\n  WHERE \"user_id\" = NEW.user_id;\n  RETURN NEW;\nEND;\n$function$\n"},
    
    {"schema_name":"public",
    "function_name":"implement_meta_data",
    "definition":"CREATE OR REPLACE FUNCTION public.implement_meta_data()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    INSERT INTO \"metaData\" (\"user_id\")\n    VALUES (NEW.id);\n    RETURN NEW;\nEND;\n$function$\n"},
    
    {"schema_name":"public",
    "function_name":"increment_active_numbers",
    "definition":"CREATE OR REPLACE FUNCTION public.increment_active_numbers()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n  UPDATE \"metaData\"\n  SET active_numbers = active_numbers + 1\n  WHERE \"user_id\" = NEW.user_id;\n  RETURN NEW;\nEND;\n$function$\n"},
    
    {"schema_name":"public",
    "function_name":"update_active_fluxes",
    "definition":"CREATE OR REPLACE FUNCTION public.update_active_fluxes()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n    affected_user_id text;\nBEGIN\n    -- Se for INSERT ou UPDATE → NEW.user_id\n    -- Se for DELETE → OLD.user_id\n    affected_user_id := COALESCE(NEW.user_id, OLD.user_id);\n\n    UPDATE \"metaData\"\n    SET active_fluxes = (\n      SELECT COUNT(*) \n      FROM \"fluxes\" \n      WHERE \"user_id\" = affected_user_id AND \"is_active\" = true\n    )\n    WHERE \"user_id\" = affected_user_id;\n\n    RETURN NEW;\nEND;\n$function$\n"},
    
    {"schema_name":"public",
    "function_name":"update_active_numbers",
    "definition":"CREATE OR REPLACE FUNCTION public.update_active_numbers()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n    affected_user_id text;\nBEGIN\n    -- Se for INSERT ou UPDATE → NEW.user_id\n    -- Se for DELETE → OLD.user_id\n    affected_user_id := COALESCE(NEW.user_id, OLD.user_id);\n\n    UPDATE \"metaData\"\n    SET active_numbers = (\n      SELECT COUNT(*) \n      FROM \"numbers\" \n      WHERE \"user_id\" = affected_user_id \n        AND connection_status = 'open'\n    )\n    WHERE \"user_id\" = affected_user_id;\n\n    RETURN NEW;\nEND;\n$function$\n"},
    
    {"schema_name":"public",
    "function_name":"update_messages_sent_today",
    "definition":"CREATE OR REPLACE FUNCTION public.update_messages_sent_today()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n    affected_user_id text;\nBEGIN\n    IF TG_OP = 'DELETE' THEN\n        SELECT \"user_id\" INTO affected_user_id\n        FROM \"fluxes\"\n        WHERE id = OLD.flux_id;\n    ELSE\n        SELECT \"user_id\" INTO affected_user_id\n        FROM \"fluxes\"\n        WHERE id = NEW.flux_id;\n    END IF;\n\n    UPDATE \"metaData\"\n    SET messages_sent_today = (\n      SELECT COUNT(*)\n      FROM \"contacts\"\n      WHERE \"flux_id\" IN (\n          SELECT id FROM \"fluxes\" WHERE \"user_id\" = affected_user_id\n      )\n      AND success = true\n      AND last_message_sent::date = CURRENT_DATE\n    )\n    WHERE \"user_id\" = affected_user_id;\n\n    IF TG_OP = 'DELETE' THEN\n        RETURN OLD;\n    ELSE\n        RETURN NEW;\n    END IF;\nEND;\n$function$\n"},
    
    {"schema_name":"public",
    "function_name":"update_successful_contacts",
    "definition":"CREATE OR REPLACE FUNCTION public.update_successful_contacts()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n    affected_user_id text;\nBEGIN\n    IF TG_OP = 'DELETE' THEN\n        SELECT \"user_id\" INTO affected_user_id\n        FROM \"fluxes\"\n        WHERE id = OLD.flux_id;\n    ELSE\n        SELECT \"user_id\" INTO affected_user_id\n        FROM \"fluxes\"\n        WHERE id = NEW.flux_id;\n    END IF;\n\n    UPDATE \"metaData\"\n    SET successful_contacts = (\n      SELECT COUNT(*) \n      FROM \"contacts\" \n      WHERE \"flux_id\" IN (\n          SELECT id FROM \"fluxes\" WHERE \"user_id\" = affected_user_id\n      )\n      AND \"success\" = true\n    )\n    WHERE \"user_id\" = affected_user_id;\n\n    IF TG_OP = 'DELETE' THEN\n        RETURN OLD;\n    ELSE\n        RETURN NEW;\n    END IF;\nEND;\n$function$\n"},
    
    {"schema_name":"public",
    "function_name":"update_total_contacts",
    "definition":"CREATE OR REPLACE FUNCTION public.update_total_contacts()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n    affected_user_id text;\nBEGIN\n    -- Obter user_id a partir do flux_id\n    IF TG_OP = 'DELETE' THEN\n        SELECT \"user_id\" INTO affected_user_id\n        FROM \"fluxes\"\n        WHERE id = OLD.flux_id;\n    ELSE\n        SELECT \"user_id\" INTO affected_user_id\n        FROM \"fluxes\"\n        WHERE id = NEW.flux_id;\n    END IF;\n\n    -- Atualizar total_contacts no metaData\n    UPDATE \"metaData\"\n    SET total_contacts = (\n      SELECT COUNT(*)\n      FROM \"contacts\"\n      WHERE \"flux_id\" IN (\n          SELECT id FROM \"fluxes\" WHERE \"user_id\" = affected_user_id\n      )\n    )\n    WHERE \"user_id\" = affected_user_id;\n\n    -- Retornar registro correto para cada operação\n    IF TG_OP = 'DELETE' THEN\n        RETURN OLD;\n    ELSE\n        RETURN NEW;\n    END IF;\nEND;\n$function$\n"},
    
    {"schema_name":"public",
    "function_name":"update_unsuccessful_contacts",
    "definition":"CREATE OR REPLACE FUNCTION public.update_unsuccessful_contacts()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n    affected_user_id text;\nBEGIN\n    IF TG_OP = 'DELETE' THEN\n        SELECT \"user_id\" INTO affected_user_id\n        FROM \"fluxes\"\n        WHERE id = OLD.flux_id;\n    ELSE\n        SELECT \"user_id\" INTO affected_user_id\n        FROM \"fluxes\"\n        WHERE id = NEW.flux_id;\n    END IF;\n\n    UPDATE \"metaData\"\n    SET unsuccessful_contacts = (\n      SELECT COUNT(*) \n      FROM \"contacts\" \n      WHERE \"flux_id\" IN (\n          SELECT id FROM \"fluxes\" WHERE \"user_id\" = affected_user_id\n      )\n      AND \"success\" = false\n    )\n    WHERE \"user_id\" = affected_user_id;\n\n    IF TG_OP = 'DELETE' THEN\n        RETURN OLD;\n    ELSE\n        RETURN NEW;\n    END IF;\nEND;\n$function$\n"}
]